generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  email    String   @unique
  birthday DateTime

  // Auth
  auth UserAuth?

  // Extra data
  bio              String?
  aboutDescription String?
  avatarUrl        String?

  // Contact Info
  phone String?
  blog  String?

  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  experiences Experience[]
  posts       Post[]
  comments    Comment[]
  postLikes   PostLike[]
  projects    Project[]
}

model UserAuth {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  password String
}

model Experience {
  id Int @id @default(autoincrement())

  title     String
  about     String
  type      ExperienceType
  state     StateExperience @default(PROGRESS)
  startDate DateTime
  endDate   DateTime?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  achievements Achievements[]

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

enum StateExperience {
  PAUSED
  PROGRESS
  COMPLETED
  CANCELLED
}

enum ExperienceType {
  PROFESSIONAL
  ACADEMIC
}

model Achievements {
  id Int @id @default(autoincrement())

  title       String
  description String

  Experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId Int
}

model Project {
  id Int @id @default(autoincrement())

  title         String
  summary       String
  about         String
  sector        String
  state         StateProject @default(PROGRESS)
  methodologies String[]
  vacancies     Vacancy[]
  startDate     DateTime
  endDate       DateTime?
  logoUrl       String?

  User   User @relation(fields: [userId], references: [id])
  userId Int

  experiences Experience[]
}

model Vacancy {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  requirements String[]
  state        StateVacancy @default(PROGRESS)
  salary       Float        @default(0)

  Project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StateVacancy {
  PAUSED
  CLOSED
  PROGRESS
}

enum StateProject {
  PAUSED
  PROGRESS
  COMPLETED
  CANCELLED
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  imageUrl String?

  comments Comment[]
  likes    PostLike[]

  User   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostLike {
  id Int @id @default(autoincrement())

  Post   Post @relation(fields: [postId], references: [id])
  postId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([postId, userId])
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  User   User @relation(fields: [userId], references: [id])
  userId Int

  Post   Post @relation(fields: [postId], references: [id])
  postId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
